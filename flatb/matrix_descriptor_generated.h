// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATRIXDESCRIPTOR_NVRDB_H_
#define FLATBUFFERS_GENERATED_MATRIXDESCRIPTOR_NVRDB_H_

#include "flatbuffers/flatbuffers.h"

#include "sl_descriptor_generated.h"

namespace nvrdb {

struct MatrixHeader;

enum Order {
  Order_ROW = 0,
  Order_COL = 1,
  Order_MIN = Order_ROW,
  Order_MAX = Order_COL
};

inline const Order (&EnumValuesOrder())[2] {
  static const Order values[] = {
    Order_ROW,
    Order_COL
  };
  return values;
}

inline const char * const *EnumNamesOrder() {
  static const char * const names[] = {
    "ROW",
    "COL",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrder(Order e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesOrder()[index];
}

struct MatrixHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DESCRIPTOR = 4,
    VT_ORDER = 6,
    VT_PRIMARYSIZE = 8,
    VT_SECONDARYSIZE = 10,
    VT_BUFFERED = 12
  };
  const IndexDescriptor *descriptor() const {
    return GetPointer<const IndexDescriptor *>(VT_DESCRIPTOR);
  }
  IndexDescriptor *mutable_descriptor() {
    return GetPointer<IndexDescriptor *>(VT_DESCRIPTOR);
  }
  Order order() const {
    return static_cast<Order>(GetField<int8_t>(VT_ORDER, 0));
  }
  bool mutate_order(Order _order) {
    return SetField<int8_t>(VT_ORDER, static_cast<int8_t>(_order), 0);
  }
  int32_t primarySize() const {
    return GetField<int32_t>(VT_PRIMARYSIZE, 0);
  }
  bool mutate_primarySize(int32_t _primarySize) {
    return SetField<int32_t>(VT_PRIMARYSIZE, _primarySize, 0);
  }
  int32_t secondarySize() const {
    return GetField<int32_t>(VT_SECONDARYSIZE, 0);
  }
  bool mutate_secondarySize(int32_t _secondarySize) {
    return SetField<int32_t>(VT_SECONDARYSIZE, _secondarySize, 0);
  }
  int32_t buffered() const {
    return GetField<int32_t>(VT_BUFFERED, 0);
  }
  bool mutate_buffered(int32_t _buffered) {
    return SetField<int32_t>(VT_BUFFERED, _buffered, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyTable(descriptor()) &&
           VerifyField<int8_t>(verifier, VT_ORDER) &&
           VerifyField<int32_t>(verifier, VT_PRIMARYSIZE) &&
           VerifyField<int32_t>(verifier, VT_SECONDARYSIZE) &&
           VerifyField<int32_t>(verifier, VT_BUFFERED) &&
           verifier.EndTable();
  }
};

struct MatrixHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_descriptor(flatbuffers::Offset<IndexDescriptor> descriptor) {
    fbb_.AddOffset(MatrixHeader::VT_DESCRIPTOR, descriptor);
  }
  void add_order(Order order) {
    fbb_.AddElement<int8_t>(MatrixHeader::VT_ORDER, static_cast<int8_t>(order), 0);
  }
  void add_primarySize(int32_t primarySize) {
    fbb_.AddElement<int32_t>(MatrixHeader::VT_PRIMARYSIZE, primarySize, 0);
  }
  void add_secondarySize(int32_t secondarySize) {
    fbb_.AddElement<int32_t>(MatrixHeader::VT_SECONDARYSIZE, secondarySize, 0);
  }
  void add_buffered(int32_t buffered) {
    fbb_.AddElement<int32_t>(MatrixHeader::VT_BUFFERED, buffered, 0);
  }
  explicit MatrixHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MatrixHeaderBuilder &operator=(const MatrixHeaderBuilder &);
  flatbuffers::Offset<MatrixHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MatrixHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<MatrixHeader> CreateMatrixHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<IndexDescriptor> descriptor = 0,
    Order order = Order_ROW,
    int32_t primarySize = 0,
    int32_t secondarySize = 0,
    int32_t buffered = 0) {
  MatrixHeaderBuilder builder_(_fbb);
  builder_.add_buffered(buffered);
  builder_.add_secondarySize(secondarySize);
  builder_.add_primarySize(primarySize);
  builder_.add_descriptor(descriptor);
  builder_.add_order(order);
  return builder_.Finish();
}

}  // namespace nvrdb

#endif  // FLATBUFFERS_GENERATED_MATRIXDESCRIPTOR_NVRDB_H_
