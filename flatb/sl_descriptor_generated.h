// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SLDESCRIPTOR_NVRDB_H_
#define FLATBUFFERS_GENERATED_SLDESCRIPTOR_NVRDB_H_

#include "flatbuffers/flatbuffers.h"

namespace nvrdb {

struct IndexDescriptor;

struct IndexDescriptor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_VERSION = 6,
    VT_INDEX = 8,
    VT_CURRENT_BUFFER = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 0);
  }
  bool mutate_version(int32_t _version) {
    return SetField<int32_t>(VT_VERSION, _version, 0);
  }
  const flatbuffers::String *index() const {
    return GetPointer<const flatbuffers::String *>(VT_INDEX);
  }
  flatbuffers::String *mutable_index() {
    return GetPointer<flatbuffers::String *>(VT_INDEX);
  }
  const flatbuffers::String *current_buffer() const {
    return GetPointer<const flatbuffers::String *>(VT_CURRENT_BUFFER);
  }
  flatbuffers::String *mutable_current_buffer() {
    return GetPointer<flatbuffers::String *>(VT_CURRENT_BUFFER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_INDEX) &&
           verifier.VerifyString(index()) &&
           VerifyOffset(verifier, VT_CURRENT_BUFFER) &&
           verifier.VerifyString(current_buffer()) &&
           verifier.EndTable();
  }
};

struct IndexDescriptorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(IndexDescriptor::VT_NAME, name);
  }
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(IndexDescriptor::VT_VERSION, version, 0);
  }
  void add_index(flatbuffers::Offset<flatbuffers::String> index) {
    fbb_.AddOffset(IndexDescriptor::VT_INDEX, index);
  }
  void add_current_buffer(flatbuffers::Offset<flatbuffers::String> current_buffer) {
    fbb_.AddOffset(IndexDescriptor::VT_CURRENT_BUFFER, current_buffer);
  }
  explicit IndexDescriptorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IndexDescriptorBuilder &operator=(const IndexDescriptorBuilder &);
  flatbuffers::Offset<IndexDescriptor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IndexDescriptor>(end);
    return o;
  }
};

inline flatbuffers::Offset<IndexDescriptor> CreateIndexDescriptor(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t version = 0,
    flatbuffers::Offset<flatbuffers::String> index = 0,
    flatbuffers::Offset<flatbuffers::String> current_buffer = 0) {
  IndexDescriptorBuilder builder_(_fbb);
  builder_.add_current_buffer(current_buffer);
  builder_.add_index(index);
  builder_.add_version(version);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<IndexDescriptor> CreateIndexDescriptorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t version = 0,
    const char *index = nullptr,
    const char *current_buffer = nullptr) {
  return nvrdb::CreateIndexDescriptor(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      version,
      index ? _fbb.CreateString(index) : 0,
      current_buffer ? _fbb.CreateString(current_buffer) : 0);
}

}  // namespace nvrdb

#endif  // FLATBUFFERS_GENERATED_SLDESCRIPTOR_NVRDB_H_
